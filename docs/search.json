[
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndata = {\n    \"제품\": [\"사과\", \"딸기\", \"수박\"],\n    \"가격\": [1800, 1500, 3000],\n    \"판매량\": [24, 38, 13]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndata = {\n    \"제품\": [\"사과\", \"딸기\", \"수박\"],\n    \"가격\": [1800, 1500, 3000],\n    \"판매량\": [24, 38, 13]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해보세요.",
    "href": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해보세요.",
    "title": "hw1",
    "section": "Q2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.",
    "text": "Q2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\n가격평균 = df[\"가격\"].mean()\n\n판매량평균 = df[\"판매량\"].mean()\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "hw1.html#q3.-mpg-데이터를-불러와-복사본을-만드세요.",
    "href": "hw1.html#q3.-mpg-데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "Q3. mpg 데이터를 불러와 복사본을 만드세요.",
    "text": "Q3. mpg 데이터를 불러와 복사본을 만드세요."
  },
  {
    "objectID": "hw1.html#q4.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "href": "hw1.html#q4.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "title": "hw1",
    "section": "Q4. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.",
    "text": "Q4. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요."
  },
  {
    "objectID": "hw1.html#q5.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해보세요.",
    "href": "hw1.html#q5.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해보세요.",
    "title": "hw1",
    "section": "Q5. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해보세요.",
    "text": "Q5. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해보세요."
  },
  {
    "objectID": "hw1.html#q6.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "hw1.html#q6.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "Q6. midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "Q6. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.head()\nmidwest.tail()\nmidwest.shape\nmidwest.info()\nmidwest.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns"
  },
  {
    "objectID": "hw1.html#q7.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "href": "hw1.html#q7.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "title": "hw1",
    "section": "Q7. poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.",
    "text": "Q7. poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})"
  },
  {
    "objectID": "hw1.html#q8.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생-변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "hw1.html#q8.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생-변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "Q8. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생 변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "Q8. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생 변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요."
  },
  {
    "objectID": "hw1.html#q9.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "href": "hw1.html#q9.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "title": "hw1",
    "section": "Q9. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.",
    "text": "Q9. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요."
  },
  {
    "objectID": "homeworkk.html",
    "href": "homeworkk.html",
    "title": "homeworkk",
    "section": "",
    "text": "1+1\n\n2"
  },
  {
    "objectID": "homework10.html",
    "href": "homework10.html",
    "title": "homework10",
    "section": "",
    "text": "1+1\n\n2"
  },
  {
    "objectID": "homework10.html#안녕하세요",
    "href": "homework10.html#안녕하세요",
    "title": "homework10",
    "section": "",
    "text": "1+1\n\n2"
  },
  {
    "objectID": "homework1.html",
    "href": "homework1.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndata = {\n    \"제품\": [\"사과\", \"딸기\", \"수박\"],\n    \"가격\": [1800, 1500, 3000],\n    \"판매량\": [24, 38, 13]\n}\n\ndf = pd.DataFrame(data)\ndf"
  },
  {
    "objectID": "homework1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "homework1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndata = {\n    \"제품\": [\"사과\", \"딸기\", \"수박\"],\n    \"가격\": [1800, 1500, 3000],\n    \"판매량\": [24, 38, 13]\n}\n\ndf = pd.DataFrame(data)\ndf"
  },
  {
    "objectID": "homework1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해보세요.",
    "href": "homework1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해보세요.",
    "title": "hw1",
    "section": "Q2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.",
    "text": "Q2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\n가격평균 = df[\"가격\"].mean()\n\n판매량평균 = df[\"판매량\"].mean()\n\ndf[[\"가격\", \"판매량\"]].mean()"
  },
  {
    "objectID": "homework1.html#q3.-mpg-데이터를-불러와-복사본을-만드세요.",
    "href": "homework1.html#q3.-mpg-데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "Q3. mpg 데이터를 불러와 복사본을 만드세요.",
    "text": "Q3. mpg 데이터를 불러와 복사본을 만드세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg2 = mpg.copy()"
  },
  {
    "objectID": "homework1.html#q4.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "href": "homework1.html#q4.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "title": "hw1",
    "section": "Q4. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.",
    "text": "Q4. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_mpg_new = df_mpg_new.rename(columns = {'cty' : 'city'})\nprint(df_mpg_new['city'])\n\ndf_mpg_new = df_mpg_new.rename(columns = {'hwy' : 'highway'})\nprint(df_mpg_new['highway'])"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi. I’m Woong\n“Hello World!”"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "슬기로운 웅이생활",
    "section": "",
    "text": "LS빅데이터스쿨 윤대웅 입니다."
  },
  {
    "objectID": "hw1.html#q1.-자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "href": "hw1.html#q1.-자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "title": "hw1",
    "section": "Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.",
    "text": "Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg_a = mpg.query(\"displ &lt;=4\")\nmpg_b = mpg.query(\"displ &gt;=5\")\n\nmpg_a[\"hwy\"].mean()\nprint(mpg_a)\n\nmpg_b[\"hwy\"].mean()\nprint(mpg)\n\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n       class  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[163 rows x 11 columns]\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n       class  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[234 rows x 11 columns]"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\n\nmpg_a = mpg.query('displ&lt;= 4')\nmpg_b = mpg.query('displ&gt;= 5')\n\n\n#displ(배기량) 4이하인 평균\nmpg_a['hwy'].mean()\n\nnp.float64(25.96319018404908)\n\n\n\n#displ(배기량) 5이상인 평균\nmpg_b['hwy'].mean()\n\nnp.float64(18.07894736842105)"
  },
  {
    "objectID": "hw2.html#q1.-자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "href": "hw2.html#q1.-자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\n\nmpg_a = mpg.query('displ&lt;= 4')\nmpg_b = mpg.query('displ&gt;= 5')\n\n\n#displ(배기량) 4이하인 평균\nmpg_a['hwy'].mean()\n\nnp.float64(25.96319018404908)\n\n\n\n#displ(배기량) 5이상인 평균\nmpg_b['hwy'].mean()\n\nnp.float64(18.07894736842105)"
  },
  {
    "objectID": "hw2.html#q2.-자동차-제조-회사에-따라-도시-연비가-어떻게-다른지-알아보려고-합니다.-audi와-toyota중-어느-manufacturer자동차-제조-회사의-cty도시-연비-평균이-더-높은지-알아보세요.",
    "href": "hw2.html#q2.-자동차-제조-회사에-따라-도시-연비가-어떻게-다른지-알아보려고-합니다.-audi와-toyota중-어느-manufacturer자동차-제조-회사의-cty도시-연비-평균이-더-높은지-알아보세요.",
    "title": "hw2",
    "section": "Q2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.",
    "text": "Q2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.\n\nmpg_audi = mpg.query('manufacturer == \"audi\"')\n\nmpg_toyota = mpg.query('manufacturer == \"toyota\"')\n\n\n#audi의 cty 평균\nmpg_audi['cty'].mean()\n\nnp.float64(17.61111111111111)\n\n\n\n#toyota의 cty 평균\nmpg_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)"
  },
  {
    "objectID": "hw2.html#q3.-chevroletfordhonda-자동차의-고속도로-연비-평균을-알아보려고-합니다.-세-회사의-데이터를-추출한-다음-hwy-전체-평균을-구해-보세요.",
    "href": "hw2.html#q3.-chevroletfordhonda-자동차의-고속도로-연비-평균을-알아보려고-합니다.-세-회사의-데이터를-추출한-다음-hwy-전체-평균을-구해-보세요.",
    "title": "hw2",
    "section": "Q3. ‘chevrolet’,‘ford’,‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.",
    "text": "Q3. ‘chevrolet’,‘ford’,‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\n#mpg_2생성, in을 사용하여 chevorlet,ford,honda에 해당하면 추출\nmpg_2 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_2['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#q4.-audi에서-생산한-자동차-중에-어떤-자동차-모델의-hwy고속도로-연비가-높은지-알아보려고-합니다.-audi에서-생산한-자동차-중-hwy가-15위에-해당하는-자동차의-데이터를-출력하세요.",
    "href": "hw2.html#q4.-audi에서-생산한-자동차-중에-어떤-자동차-모델의-hwy고속도로-연비가-높은지-알아보려고-합니다.-audi에서-생산한-자동차-중-hwy가-15위에-해당하는-자동차의-데이터를-출력하세요.",
    "title": "hw2",
    "section": "Q4. ’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.",
    "text": "Q4. ’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nmpg.query('manufacturer == \"audi\"').sort_values('hwy', ascending=False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "hw2.html#q5.-mpg-데이터-복사본을-만들고-cty와-hwy를-더한-합산-연비-변수를-추가하세요.",
    "href": "hw2.html#q5.-mpg-데이터-복사본을-만들고-cty와-hwy를-더한-합산-연비-변수를-추가하세요.",
    "title": "hw2",
    "section": "Q5. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.",
    "text": "Q5. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg_create = mpg.copy()\n\n#cty, hwy를 더한 '합산 연비 변수'를 추가\nmpg_create = mpg_create.assign(total = mpg_create['cty'] + mpg_create['hwy'])\n\nmpg_create\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns"
  },
  {
    "objectID": "hw2.html#q6.-앞에서-만든-합산-연비-변수를-2로-나눠-평균-연비-변수를-추가하세요.",
    "href": "hw2.html#q6.-앞에서-만든-합산-연비-변수를-2로-나눠-평균-연비-변수를-추가하세요.",
    "title": "hw2",
    "section": "Q6. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.",
    "text": "Q6. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\n#평균 연비 변수 추가\nmpg_create = mpg_create.assign(mean = mpg_create['total']/2)\nmpg_create\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns"
  },
  {
    "objectID": "hw2.html#q7.-평균-연비-변수가-가장-높은-자동차-3종의-데이터를-출력하세요.",
    "href": "hw2.html#q7.-평균-연비-변수가-가장-높은-자동차-3종의-데이터를-출력하세요.",
    "title": "hw2",
    "section": "Q7. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.",
    "text": "Q7. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\n#mean 내림차순, 맨 위 3개 출력\nmpg_create.sort_values('mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "hw2.html#q8.-13번-문제를-해결할-수-있는-하나로-연결된-pandas-구문을-만들어-실행해-보세요.-데이터는-복사본-대신-mpg-원본을-이용하세요.",
    "href": "hw2.html#q8.-13번-문제를-해결할-수-있는-하나로-연결된-pandas-구문을-만들어-실행해-보세요.-데이터는-복사본-대신-mpg-원본을-이용하세요.",
    "title": "hw2",
    "section": "Q8. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.",
    "text": "Q8. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nmpg.assign(total = lambda x: x['cty'] + x['hwy'],\n            mean = lambda x: x['total'] / 2).sort_values('mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndata = {\n    \"제품\": [\"사과\", \"딸기\", \"수박\"],\n    \"가격\": [1800, 1500, 3000],\n    \"판매량\": [24, 38, 13]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "posts/hw1/index.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "posts/hw1/index.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndata = {\n    \"제품\": [\"사과\", \"딸기\", \"수박\"],\n    \"가격\": [1800, 1500, 3000],\n    \"판매량\": [24, 38, 13]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "posts/hw1/index.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해보세요.",
    "href": "posts/hw1/index.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해보세요.",
    "title": "hw1",
    "section": "Q2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.",
    "text": "Q2. 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.\n\n가격평균 = df[\"가격\"].mean()\n\n판매량평균 = df[\"판매량\"].mean()\n\ndf[[\"가격\", \"판매량\"]].mean()\n\n가격     2100.0\n판매량      25.0\ndtype: float64"
  },
  {
    "objectID": "posts/hw1/index.html#q3.-mpg-데이터를-불러와-복사본을-만드세요.",
    "href": "posts/hw1/index.html#q3.-mpg-데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "Q3. mpg 데이터를 불러와 복사본을 만드세요.",
    "text": "Q3. mpg 데이터를 불러와 복사본을 만드세요."
  },
  {
    "objectID": "posts/hw1/index.html#q4.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "href": "posts/hw1/index.html#q4.-복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "title": "hw1",
    "section": "Q4. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.",
    "text": "Q4. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요."
  },
  {
    "objectID": "posts/hw1/index.html#q5.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해보세요.",
    "href": "posts/hw1/index.html#q5.-데이터-일부를-출력해-변수명이-바뀌었는지-확인해보세요.",
    "title": "hw1",
    "section": "Q5. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해보세요.",
    "text": "Q5. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해보세요."
  },
  {
    "objectID": "posts/hw1/index.html#q6.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "posts/hw1/index.html#q6.-midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "Q6. midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "Q6. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nmidwest.head()\nmidwest.tail()\nmidwest.shape\nmidwest.info()\nmidwest.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns"
  },
  {
    "objectID": "posts/hw1/index.html#q7.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "href": "posts/hw1/index.html#q7.-poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정하세요.",
    "title": "hw1",
    "section": "Q7. poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.",
    "text": "Q7. poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})"
  },
  {
    "objectID": "posts/hw1/index.html#q8.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생-변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "posts/hw1/index.html#q8.-total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생-변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "Q8. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생 변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "Q8. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생 변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\n#백분율 변수\n\nmidwest['ratio'] = midwest['asian'] / midwest['total'] * 100\n\nmidwest\n\n#히스토그램\n\nmidwest['ratio'].plot.hist()"
  },
  {
    "objectID": "posts/hw1/index.html#q9.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "href": "posts/hw1/index.html#q9.-아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "title": "hw1",
    "section": "Q9. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.",
    "text": "Q9. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nratio_mean = midwest['ratio'].mean()\nratio_mean\n\nnp.float64(0.4872461834357345)\n\n\n\nimport numpy as np\nmidwest['size'] = np.where(midwest['ratio'] &gt; ratio_mean, 'large', 'small')\nmidwest\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nratio\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns"
  },
  {
    "objectID": "posts/hw1/index.html#q1.-자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "href": "posts/hw1/index.html#q1.-자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "title": "hw1",
    "section": "Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.",
    "text": "Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg_a = mpg.query(\"displ &lt;=4\")\nmpg_b = mpg.query(\"displ &gt;=5\")\n\nmpg_a[\"hwy\"].mean()\nprint(mpg_a)\n\nmpg_b[\"hwy\"].mean()\nprint(mpg)\n\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n       class  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[163 rows x 11 columns]\n    manufacturer   model  displ  year  cyl       trans drv  cty  hwy fl  \\\n0           audi      a4    1.8  1999    4    auto(l5)   f   18   29  p   \n1           audi      a4    1.8  1999    4  manual(m5)   f   21   29  p   \n2           audi      a4    2.0  2008    4  manual(m6)   f   20   31  p   \n3           audi      a4    2.0  2008    4    auto(av)   f   21   30  p   \n4           audi      a4    2.8  1999    6    auto(l5)   f   16   26  p   \n..           ...     ...    ...   ...  ...         ...  ..  ...  ... ..   \n229   volkswagen  passat    2.0  2008    4    auto(s6)   f   19   28  p   \n230   volkswagen  passat    2.0  2008    4  manual(m6)   f   21   29  p   \n231   volkswagen  passat    2.8  1999    6    auto(l5)   f   16   26  p   \n232   volkswagen  passat    2.8  1999    6  manual(m5)   f   18   26  p   \n233   volkswagen  passat    3.6  2008    6    auto(s6)   f   17   26  p   \n\n       class  \n0    compact  \n1    compact  \n2    compact  \n3    compact  \n4    compact  \n..       ...  \n229  midsize  \n230  midsize  \n231  midsize  \n232  midsize  \n233  midsize  \n\n[234 rows x 11 columns]"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\n\nmpg_a = mpg.query('displ&lt;= 4')\nmpg_b = mpg.query('displ&gt;= 5')\n\n\n#displ(배기량) 4이하인 평균\nmpg_a['hwy'].mean()\n\nnp.float64(25.96319018404908)\n\n\n\n#displ(배기량) 5이상인 평균\nmpg_b['hwy'].mean()\n\nnp.float64(18.07894736842105)"
  },
  {
    "objectID": "posts/hw2/index.html#q1.-자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "href": "posts/hw2/index.html#q1.-자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\n\nmpg_a = mpg.query('displ&lt;= 4')\nmpg_b = mpg.query('displ&gt;= 5')\n\n\n#displ(배기량) 4이하인 평균\nmpg_a['hwy'].mean()\n\nnp.float64(25.96319018404908)\n\n\n\n#displ(배기량) 5이상인 평균\nmpg_b['hwy'].mean()\n\nnp.float64(18.07894736842105)"
  },
  {
    "objectID": "posts/hw2/index.html#q2.-자동차-제조-회사에-따라-도시-연비가-어떻게-다른지-알아보려고-합니다.-audi와-toyota중-어느-manufacturer자동차-제조-회사의-cty도시-연비-평균이-더-높은지-알아보세요.",
    "href": "posts/hw2/index.html#q2.-자동차-제조-회사에-따라-도시-연비가-어떻게-다른지-알아보려고-합니다.-audi와-toyota중-어느-manufacturer자동차-제조-회사의-cty도시-연비-평균이-더-높은지-알아보세요.",
    "title": "hw2",
    "section": "Q2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.",
    "text": "Q2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ’audi’와 ’toyota’중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.\n\nmpg_audi = mpg.query('manufacturer == \"audi\"')\n\nmpg_toyota = mpg.query('manufacturer == \"toyota\"')\n\n\n#audi의 cty 평균\nmpg_audi['cty'].mean()\n\nnp.float64(17.61111111111111)\n\n\n\n#toyota의 cty 평균\nmpg_toyota['cty'].mean()\n\nnp.float64(18.529411764705884)"
  },
  {
    "objectID": "posts/hw2/index.html#q3.-chevroletfordhonda-자동차의-고속도로-연비-평균을-알아보려고-합니다.-세-회사의-데이터를-추출한-다음-hwy-전체-평균을-구해-보세요.",
    "href": "posts/hw2/index.html#q3.-chevroletfordhonda-자동차의-고속도로-연비-평균을-알아보려고-합니다.-세-회사의-데이터를-추출한-다음-hwy-전체-평균을-구해-보세요.",
    "title": "hw2",
    "section": "Q3. ‘chevrolet’,‘ford’,‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.",
    "text": "Q3. ‘chevrolet’,‘ford’,‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\n#mpg_2생성, in을 사용하여 chevorlet,ford,honda에 해당하면 추출\nmpg_2 = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\nmpg_2['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#q4.-audi에서-생산한-자동차-중에-어떤-자동차-모델의-hwy고속도로-연비가-높은지-알아보려고-합니다.-audi에서-생산한-자동차-중-hwy가-15위에-해당하는-자동차의-데이터를-출력하세요.",
    "href": "posts/hw2/index.html#q4.-audi에서-생산한-자동차-중에-어떤-자동차-모델의-hwy고속도로-연비가-높은지-알아보려고-합니다.-audi에서-생산한-자동차-중-hwy가-15위에-해당하는-자동차의-데이터를-출력하세요.",
    "title": "hw2",
    "section": "Q4. ’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.",
    "text": "Q4. ’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nmpg.query('manufacturer == \"audi\"').sort_values('hwy', ascending=False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#q5.-mpg-데이터-복사본을-만들고-cty와-hwy를-더한-합산-연비-변수를-추가하세요.",
    "href": "posts/hw2/index.html#q5.-mpg-데이터-복사본을-만들고-cty와-hwy를-더한-합산-연비-변수를-추가하세요.",
    "title": "hw2",
    "section": "Q5. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.",
    "text": "Q5. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg_create = mpg.copy()\n\n#cty, hwy를 더한 '합산 연비 변수'를 추가\nmpg_create = mpg_create.assign(total = mpg_create['cty'] + mpg_create['hwy'])\n\nmpg_create\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns"
  },
  {
    "objectID": "posts/hw2/index.html#q6.-앞에서-만든-합산-연비-변수를-2로-나눠-평균-연비-변수를-추가하세요.",
    "href": "posts/hw2/index.html#q6.-앞에서-만든-합산-연비-변수를-2로-나눠-평균-연비-변수를-추가하세요.",
    "title": "hw2",
    "section": "Q6. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.",
    "text": "Q6. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\n#평균 연비 변수 추가\nmpg_create = mpg_create.assign(mean = mpg_create['total']/2)\nmpg_create\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\nmean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns"
  },
  {
    "objectID": "posts/hw2/index.html#q7.-평균-연비-변수가-가장-높은-자동차-3종의-데이터를-출력하세요.",
    "href": "posts/hw2/index.html#q7.-평균-연비-변수가-가장-높은-자동차-3종의-데이터를-출력하세요.",
    "title": "hw2",
    "section": "Q7. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.",
    "text": "Q7. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\n#mean 내림차순, 맨 위 3개 출력\nmpg_create.sort_values('mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw2/index.html#q8.-13번-문제를-해결할-수-있는-하나로-연결된-pandas-구문을-만들어-실행해-보세요.-데이터는-복사본-대신-mpg-원본을-이용하세요.",
    "href": "posts/hw2/index.html#q8.-13번-문제를-해결할-수-있는-하나로-연결된-pandas-구문을-만들어-실행해-보세요.-데이터는-복사본-대신-mpg-원본을-이용하세요.",
    "title": "hw2",
    "section": "Q8. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.",
    "text": "Q8. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nmpg.assign(total = lambda x: x['cty'] + x['hwy'],\n            mean = lambda x: x['total'] / 2).sort_values('mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntotal\nmean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "숙제",
    "section": "",
    "text": "hw2\n\n\n\n\n\n\n\n\n\n\n\nyoon\n\n\n\n\n\n\n\n\n\n\n\n\nhw3\n\n\n\n\n\n\n\n\n\n\n\nyoon\n\n\n\n\n\n\n\n\n\n\n\n\nhw4\n\n\n\n\n\n\n\n\n\n\n\nyoon\n\n\n\n\n\n\n\n\n\n\n\n\nhw1\n\n\n\n\n\n\nbigdata\n\n\n\n\n\n\n\n\n\nJul 12, 2024\n\n\n윤대웅\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "graph.html",
    "href": "graph.html",
    "title": "graph",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"data/mpg.csv\")\nmpg.shape\n\n(234, 11)\n\n\n\n## 막대그래프\n\n::: {#3c6e9831 .cell execution_count=2}\n``` {.python .cell-code}\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n    .agg(mean_hwy = (\"hwy\", \"mean\"))\nplt.clf()\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"),  #정렬 추가\n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n:::\n\n\n\nplt.clf()\nsns.countplot(data = mpg, x = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\", ascending = False), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()"
  },
  {
    "objectID": "graph.html#seaborn-패키지-불러오기",
    "href": "graph.html#seaborn-패키지-불러오기",
    "title": "graph",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"data/mpg.csv\")\nmpg.shape\n\n(234, 11)\n\n\n\n## 막대그래프\n\n::: {#3c6e9831 .cell execution_count=2}\n``` {.python .cell-code}\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n    .agg(mean_hwy = (\"hwy\", \"mean\"))\nplt.clf()\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"),  #정렬 추가\n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n:::\n\n\n\nplt.clf()\nsns.countplot(data = mpg, x = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\", ascending = False), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()"
  },
  {
    "objectID": "graph1.html",
    "href": "graph1.html",
    "title": "graph1",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"data/mpg.csv\")\nmpg.shape\n\n(234, 11)"
  },
  {
    "objectID": "graph1.html#데이터-및-패키지-로드",
    "href": "graph1.html#데이터-및-패키지-로드",
    "title": "graph1",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"data/mpg.csv\")\nmpg.shape\n\n(234, 11)"
  },
  {
    "objectID": "graph1.html#산점도-만들기",
    "href": "graph1.html#산점도-만들기",
    "title": "graph1",
    "section": "산점도 만들기",
    "text": "산점도 만들기\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\") \\\n    .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\", hue = 'drv') \\\n .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n막대그래프 (plotbar)\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False).agg(mean_hwy = (\"hwy\", \"mean\"))\n\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (크기순으로 정렬)\n\nplt.clf()\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\", ascending = False), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (barplot)\n\nimport plotly.express as px\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n    .agg(mean_hwy = (\"hwy\", \"mean\"))\nplt.clf()\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"),  #정렬 추가\n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (countplot)\n\nplt.clf()\nsns.countplot(data=mpg, x= \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nplotly 산점도\n\nimport plotly.express as px\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')"
  },
  {
    "objectID": "docs/gra1.html",
    "href": "docs/gra1.html",
    "title": "hw3",
    "section": "",
    "text": "mpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비)간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nsns.scatterplot(data = mpg, x='cty', y='hwy')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nsns.scatterplot(data = midwest, x= 'poptotal', y= 'popasian').set(xlim= (0, 5000000), ylim=(0,10000))\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\n\nmpg_suv = mpg.query('category == \"suv\"').groupby('manufacturer', as_index = True).agg(n = ('cty', 'mean'))\n\n#sns.barplot(data = mpg_suv.sort_values(\"n\", ascending = False).head(5), x = 'manufacturer', y = 'n')\n\n\n\n자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n#df_mpg = mpg.groupby('category', as_index=False).agg(count = ('category', 'count')).sort_values('count', ascending=False)\n#df_mpg\n\n#import seaborn as sns\n#sns.barplot(data= df_mpg, x = 'category' , y = 'count')"
  },
  {
    "objectID": "docs/gra1.html#데이터-및-패키지-로드",
    "href": "docs/gra1.html#데이터-및-패키지-로드",
    "title": "gra1",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg.shape\n\n(234, 11)"
  },
  {
    "objectID": "docs/gra1.html#산점도-만들기",
    "href": "docs/gra1.html#산점도-만들기",
    "title": "gra1",
    "section": "산점도 만들기",
    "text": "산점도 만들기\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\") \\\n    .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\", hue = 'drv') \\\n .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n막대그래프 (plotbar)\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False).agg(mean_hwy = (\"hwy\", \"mean\"))\n\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (크기순으로 정렬)\n\nplt.clf()\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\", ascending = False), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (barplot)\n\nimport plotly.express as px\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n    .agg(mean_hwy = (\"hwy\", \"mean\"))\nplt.clf()\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"),  #정렬 추가\n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (countplot)\n\nplt.clf()\nsns.countplot(data=mpg, x= \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nplotly 산점도\n\nimport plotly.express as px\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')"
  },
  {
    "objectID": "docs/index.html",
    "href": "docs/index.html",
    "title": "gra1",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg.shape\n\n(234, 11)"
  },
  {
    "objectID": "docs/index.html#데이터-및-패키지-로드",
    "href": "docs/index.html#데이터-및-패키지-로드",
    "title": "gra1",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg.shape\n\n(234, 11)"
  },
  {
    "objectID": "docs/index.html#산점도-만들기",
    "href": "docs/index.html#산점도-만들기",
    "title": "gra1",
    "section": "산점도 만들기",
    "text": "산점도 만들기\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\") \\\n    .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\", hue = 'drv') \\\n .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n막대그래프 (plotbar)\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False).agg(mean_hwy = (\"hwy\", \"mean\"))\n\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (크기순으로 정렬)\n\nplt.clf()\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\", ascending = False), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (barplot)\n\nimport plotly.express as px\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n    .agg(mean_hwy = (\"hwy\", \"mean\"))\nplt.clf()\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"),  #정렬 추가\n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (countplot)\n\nplt.clf()\nsns.countplot(data=mpg, x= \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nplotly 산점도\n\nimport plotly.express as px\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')"
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "hw3",
    "section": "",
    "text": "데이터 및 패키지 로드\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg.shape\n\n(234, 11)\n\n\n\n\n산점도 만들기\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\") \\\n    .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\", hue = 'drv') \\\n .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n막대그래프 (plotbar)\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False).agg(mean_hwy = (\"hwy\", \"mean\"))\n\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (크기순으로 정렬)\n\nplt.clf()\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\", ascending = False), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (barplot)\n\nimport plotly.express as px\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n    .agg(mean_hwy = (\"hwy\", \"mean\"))\nplt.clf()\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"),  #정렬 추가\n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (countplot)\n\nplt.clf()\nsns.countplot(data=mpg, x= \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nplotly 산점도\n\nimport plotly.express as px\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')\n\n                                                \n\n\n\n\nmpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비)간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nsns.scatterplot(data = mpg, x='cty', y='hwy')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nsns.scatterplot(data = midwest, x= 'poptotal', y= 'popasian').set(xlim= (0, 5000000), ylim=(0,10000))\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#mpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\n\n#mpg_suv = mpg.query('category == \"suv\"').groupby('manufacturer', as_index = True).agg(n = ('cty', 'mean'))\n\n#sns.barplot(data = mpg_suv.sort_values(\"n\", ascending = False).head(5), x = 'manufacturer', y = 'n')\n\n\n\n자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n#df_mpg = mpg.groupby('category', as_index=False).agg(count = ('category', 'count')).sort_values('count', ascending=False)\n#df_mpg\n\n#import seaborn as sns\n#sns.barplot(data= df_mpg, x = 'category' , y = 'count')"
  },
  {
    "objectID": "gra.html",
    "href": "gra.html",
    "title": "gra",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg.shape\n\n(234, 11)"
  },
  {
    "objectID": "gra.html#데이터-및-패키지-로드",
    "href": "gra.html#데이터-및-패키지-로드",
    "title": "gra",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg.shape\n\n(234, 11)"
  },
  {
    "objectID": "gra.html#산점도-만들기",
    "href": "gra.html#산점도-만들기",
    "title": "gra",
    "section": "산점도 만들기",
    "text": "산점도 만들기\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\") \\\n    .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\", hue = 'drv') \\\n .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n막대그래프 (plotbar)\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False).agg(mean_hwy = (\"hwy\", \"mean\"))\n\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (크기순으로 정렬)\n\nplt.clf()\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\", ascending = False), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (barplot)\n\nimport plotly.express as px\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n    .agg(mean_hwy = (\"hwy\", \"mean\"))\nplt.clf()\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"),  #정렬 추가\n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (countplot)\n\nplt.clf()\nsns.countplot(data=mpg, x= \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nplotly 산점도\n\nimport plotly.express as px\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')"
  },
  {
    "objectID": "posts/hw3/index.html#데이터-및-패키지-로드",
    "href": "posts/hw3/index.html#데이터-및-패키지-로드",
    "title": "hw3",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nmpg.shape\n\n(234, 11)"
  },
  {
    "objectID": "posts/hw3/index.html#산점도-만들기",
    "href": "posts/hw3/index.html#산점도-만들기",
    "title": "hw3",
    "section": "산점도 만들기",
    "text": "산점도 만들기\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\") \\\n    .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\nsns.scatterplot(data=mpg, x=\"displ\", y=\"hwy\", hue = 'drv') \\\n .set(xlim = [3,6], ylim=[10, 30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n막대그래프 (plotbar)\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False).agg(mean_hwy = (\"hwy\", \"mean\"))\n\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (크기순으로 정렬)\n\nplt.clf()\nsns.barplot(data=df_mpg.sort_values(\"mean_hwy\", ascending = False), \n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (barplot)\n\nimport plotly.express as px\n\ndf_mpg = mpg.groupby(\"drv\", as_index = False) \\\n    .agg(mean_hwy = (\"hwy\", \"mean\"))\nplt.clf()\nsns.barplot(data = df_mpg.sort_values(\"mean_hwy\"),  #정렬 추가\n            x = \"drv\", y = \"mean_hwy\", hue = \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n막대그래프 (countplot)\n\nplt.clf()\nsns.countplot(data=mpg, x= \"drv\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nplotly 산점도\n\nimport plotly.express as px\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')\n\n                                                \n\n\n\n\nmpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비)간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어 보세요.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nmpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\nsns.scatterplot(data = mpg, x='cty', y='hwy')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmidwest = pd.read_csv(\"C:/Users/USER/Downloads/midwest.csv\")\nsns.scatterplot(data = midwest, x= 'poptotal', y= 'popasian').set(xlim= (0, 5000000), ylim=(0,10000))\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#mpg = pd.read_csv(\"C:/Users/USER/Downloads/mpg.csv\")\n\n#mpg_suv = mpg.query('category == \"suv\"').groupby('manufacturer', as_index = True).agg(n = ('cty', 'mean'))\n\n#sns.barplot(data = mpg_suv.sort_values(\"n\", ascending = False).head(5), x = 'manufacturer', y = 'n')\n\n\n\n자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n#df_mpg = mpg.groupby('category', as_index=False).agg(count = ('category', 'count')).sort_values('count', ascending=False)\n#df_mpg\n\n#import seaborn as sns\n#sns.barplot(data= df_mpg, x = 'category' , y = 'count')"
  },
  {
    "objectID": "hw4.html",
    "href": "hw4.html",
    "title": "Untitled",
    "section": "",
    "text": "1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2 의 pdf를 그릴 것.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmu = 3\nsigma = 2\nx = np.linspace(-5, 11, 1000)\n\ndef pdf_a (x, mu, sigma) : return (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-0.5 * ((x - mu) / sigma) ** 2)\n\npdf = pdf_a(x, mu, sigma)\n\nplt.plot(x, pdf)\nplt.show()\n\n\n\n\n\n\n\n\n\n### 2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\n# X ~ N(2, 3^2)\n\n# 1) P(X &lt; 3)\n\n# 2) P(2 &lt; X &lt; 5)\n\n# 3) P(X &lt; 3 or X &gt; 7)\n\n\n### 3. LS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?"
  },
  {
    "objectID": "hw4.html#def-return-함수를-사용",
    "href": "hw4.html#def-return-함수를-사용",
    "title": "Untitled",
    "section": "def / return 함수를 사용",
    "text": "def / return 함수를 사용\n정규분포.png\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmu = 3\nsigma = 2\nx = np.linspace(-5, 11, 1000)\n\ndef pdf_a (x, mu, sigma) : return (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-0.5 * ((x - mu) / sigma) ** 2)\n\npdf = pdf_a(x, mu, sigma)\n\n\nplt.plot(x, pdf)\nplt.show()\n\n\n\n\n\n\n\n\n\n2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오."
  },
  {
    "objectID": "hw4.html#cdf-누적분포함수",
    "href": "hw4.html#cdf-누적분포함수",
    "title": "Untitled",
    "section": "cdf : 누적분포함수",
    "text": "cdf : 누적분포함수\n\n# 1) P(X &lt; 3)\nimport scipy.stats as stats\n\nmu = 2\nsigma = 3\n\n# 1) P(X &lt; 3)\nprob_a = stats.norm.cdf(3, loc=mu, scale=3)\nprob_a\n\n# 2) P(2 &lt; X &lt; 5)\nprob_b = stats.norm.cdf(5, loc=mu, scale=3) - stats.norm.cdf(2, loc=mu, scale=sigma)\nprob_b\n\n# 3) P(X &lt; 3 or X &gt; 7)\nprob_c = stats.norm.cdf(3, loc=mu, scale=3) + (1 - stats.norm.cdf(7, loc=mu, scale=sigma))\nprob_c\n\nnp.float64(0.678349012091051)\n\n\n\n3. LS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?"
  },
  {
    "objectID": "hw4.html#def-return-함수를-사용-scipy.stats-사용-x",
    "href": "hw4.html#def-return-함수를-사용-scipy.stats-사용-x",
    "title": "Untitled",
    "section": "def / return 함수를 사용 (scipy.stats 사용 X)",
    "text": "def / return 함수를 사용 (scipy.stats 사용 X)\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmu = 3\nsigma = 2\nx = np.linspace(-5, 11, 1000)\n\ndef pdf_a (x, mu, sigma) : return (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-0.5 * ((x - mu) / sigma) ** 2)\n\npdf = pdf_a(x, mu, sigma)\n\n\nplt.plot(x, pdf)\nplt.show()\n\n\n\n\n\n\n\n\n\n2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오."
  },
  {
    "objectID": "hw4.html#ppf-퀀타일-함수",
    "href": "hw4.html#ppf-퀀타일-함수",
    "title": "Untitled",
    "section": "ppf : 퀀타일 함수",
    "text": "ppf : 퀀타일 함수\n\nimport scipy.stats as stats\n\nmu = 30\nsigma = 2 #표준편차 : 분산의 제곱근\n\nppf = stats.norm.ppf(0.95, loc=30, scale=2) #누적확률 95% -&gt; 상위5% (상위 5% = 하위95%)\n\nppf\n\nnp.float64(33.28970725390295)"
  },
  {
    "objectID": "posts/hw4/index.html#def-return-함수를-사용-scipy.stats-사용-x",
    "href": "posts/hw4/index.html#def-return-함수를-사용-scipy.stats-사용-x",
    "title": "hw4",
    "section": "def / return 함수를 사용 (scipy.stats 사용 X)",
    "text": "def / return 함수를 사용 (scipy.stats 사용 X)\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmu = 3\nsigma = 2\nx = np.linspace(-5, 11, 1000)\n\ndef pdf_a (x, mu, sigma) : return (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-0.5 * ((x - mu) / sigma) ** 2)\n\npdf = pdf_a(x, mu, sigma)\n\n\nplt.plot(x, pdf)\nplt.show()\n\n\n\n\n\n\n\n\n\n2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오."
  },
  {
    "objectID": "posts/hw4/index.html#cdf-누적분포함수",
    "href": "posts/hw4/index.html#cdf-누적분포함수",
    "title": "hw4",
    "section": "cdf : 누적분포함수",
    "text": "cdf : 누적분포함수\n\n# 1) P(X &lt; 3)\nimport scipy.stats as stats\n\nmu = 2\nsigma = 3\n\n# 1) P(X &lt; 3)\nprob_a = stats.norm.cdf(3, loc=mu, scale=3)\nprob_a\n\n# 2) P(2 &lt; X &lt; 5)\nprob_b = stats.norm.cdf(5, loc=mu, scale=3) - stats.norm.cdf(2, loc=mu, scale=sigma)\nprob_b\n\n# 3) P(X &lt; 3 or X &gt; 7)\nprob_c = stats.norm.cdf(3, loc=mu, scale=3) + (1 - stats.norm.cdf(7, loc=mu, scale=sigma))\nprob_c\n\nnp.float64(0.678349012091051)\n\n\n\n3. LS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다. 상위 5%에 해당하는 학생의 점수는?"
  },
  {
    "objectID": "posts/hw4/index.html#ppf-퀀타일-함수",
    "href": "posts/hw4/index.html#ppf-퀀타일-함수",
    "title": "hw4",
    "section": "ppf : 퀀타일 함수",
    "text": "ppf : 퀀타일 함수\n\nimport scipy.stats as stats\n\nmu = 30\nsigma = 2 #표준편차 : 분산의 제곱근\n\nppf = stats.norm.ppf(0.95, loc=30, scale=2) #누적확률 95% -&gt; 상위5% (상위 5% = 하위95%)\n\nppf\n\nnp.float64(33.28970725390295)"
  },
  {
    "objectID": "posts/hw4/index.html",
    "href": "posts/hw4/index.html",
    "title": "hw4",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\nmu = 3\nsigma = 2\nx = np.linspace(-5, 11, 1000)\n\ndef pdf_a (x, mu, sigma) : return (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-0.5 * ((x - mu) / sigma) ** 2)\n\npdf = pdf_a(x, mu, sigma)\n\n\nplt.plot(x, pdf)\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#x-n2-32",
    "href": "posts/hw4/index.html#x-n2-32",
    "title": "hw4",
    "section": "X ~ N(2, 3^2)",
    "text": "X ~ N(2, 3^2)\n\ncdf : 누적분포함수\n\nimport scipy.stats as stats\n\nmu = 2\nsigma = 3\n\n# 1) P(X &lt; 3)\nprob_a = stats.norm.cdf(3, loc=mu, scale=3)\nprob_a\n\n# 2) P(2 &lt; X &lt; 5)\nprob_b = stats.norm.cdf(5, loc=mu, scale=3) - stats.norm.cdf(2, loc=mu, scale=sigma)\nprob_b\n\n# 3) P(X &lt; 3 or X &gt; 7)\nprob_c = stats.norm.cdf(3, loc=mu, scale=3) + (1 - stats.norm.cdf(7, loc=mu, scale=sigma))\nprob_c\n\nnp.float64(0.678349012091051)"
  }
]