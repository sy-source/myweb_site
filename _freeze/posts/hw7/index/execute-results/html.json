{
  "hash": "ababebf928a741f3118a133b47f477f7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: hw7\neditor: visual\n---\n\n## 2. 가설 설정\n\n### H0: μ = 16.0/ H1: μ != 16.0\n### 𝐻𝑎 ∶ 𝜇 ≠ 𝜇0 인 경우 2𝑃 (𝑇 ≥ |𝑡|)\n\n::: {#6eb9f6b3 .cell execution_count=1}\n``` {.python .cell-code}\n# H0: μ = 16.0\n# H1: μ != 16.0\n\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\n\n```\n:::\n\n\n## 3. 검정통계량 계산\n\n::: {#5b19b92f .cell execution_count=2}\n``` {.python .cell-code}\ncar = np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804])\n\nmu = 16.0\nn = len(car) # 15개\nx_bar = np.mean(car)\nstd = np.std(car, ddof=1) #표준편차 (ddof=1 -> n-1)\n\nt_s = (x_bar - mu) / (std / np.sqrt(n))\nt_s\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nnp.float64(-1.8500447456376756)\n```\n:::\n:::\n\n\n# 4. p-value 계산\n\n::: {#361810a5 .cell execution_count=3}\n``` {.python .cell-code}\n# 절대값(abs) 사용하지 않은 경우\na_value = 2 * (1 - norm.cdf(t_s, loc=0, scale=1))\na_value\n\n# 절대값(abs) 사용 한 경우\np_value = 2 * (1 - norm.cdf(abs(t_s), loc=0, scale=1)) #abs -> 절대값\np_value\n\n# 절대값을 사용하여 항상 양측 검정을 고려\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nnp.float64(0.0643071006806395)\n```\n:::\n:::\n\n\n# 6. 95 % 신뢰 구간\n\n::: {#281aef6d .cell execution_count=4}\n``` {.python .cell-code}\nnorm.ppf(0.025, loc=car.mean(), scale=car.std(ddof=1)) # (ddof=1 -> n-1)\nnorm.ppf(0.975, loc=car.mean(), scale=car.std(ddof=1)) # (ddof=1 -> n-1)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nnp.float64(17.453075578835357)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}