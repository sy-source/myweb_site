---
title: "hw2"
author: "yoon"
editor: visual
jupyter: python3
---

## Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.

```{python}

import pandas as pd

mpg = pd.read_csv("C:/Users/USER/Downloads/mpg.csv")

mpg_a = mpg.query('displ<= 4')
mpg_b = mpg.query('displ>= 5')

```

```{python}
#displ(배기량) 4이하인 평균
mpg_a['hwy'].mean()

```

```{python}
#displ(배기량) 5이상인 평균
mpg_b['hwy'].mean()

```


## Q2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. 'audi'와 'toyota'중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.

```{python}

mpg_audi = mpg.query('manufacturer == "audi"')

mpg_toyota = mpg.query('manufacturer == "toyota"')

```

```{python}

#audi의 cty 평균
mpg_audi['cty'].mean()

```

```{python}

#toyota의 cty 평균
mpg_toyota['cty'].mean()

```


## Q3. 'chevrolet','ford','honda' 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.

```{python}

#mpg_2생성, in을 사용하여 chevorlet,ford,honda에 해당하면 추출
mpg_2 = mpg.query('manufacturer in ["chevrolet", "ford", "honda"]')
mpg_2['hwy'].mean()

```

## Q4. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. 'audi'에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.

```{python}

mpg.query('manufacturer == "audi"').sort_values('hwy', ascending=False).head()

```

## Q5. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 '합산 연비 변수'를 추가하세요.


```{python}

mpg = pd.read_csv("C:/Users/USER/Downloads/mpg.csv")
mpg_create = mpg.copy()

#cty, hwy를 더한 '합산 연비 변수'를 추가
mpg_create = mpg_create.assign(total = mpg_create['cty'] + mpg_create['hwy'])

mpg_create

```


## Q6. 앞에서 만든 '합산 연비 변수'를 2로 나눠 '평균 연비 변수'를 추가하세요.

```{python}

#평균 연비 변수 추가
mpg_create = mpg_create.assign(mean = mpg_create['total']/2)
mpg_create

```

## Q7. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.

```{python}
#mean 내림차순, 맨 위 3개 출력
mpg_create.sort_values('mean', ascending = False).head(3)

```

## Q8. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.

```{python}

mpg.assign(total = lambda x: x['cty'] + x['hwy'],
            mean = lambda x: x['total'] / 2).sort_values('mean', ascending = False).head(3)

```




